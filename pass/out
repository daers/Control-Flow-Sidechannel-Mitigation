; ModuleID = '<stdin>'
source_filename = "rsa.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @decimal_to_binary(i32 %op1, i32* %aOp) #0 {
entry:
  %op1.addr = alloca i32, align 4
  %aOp.addr = alloca i32*, align 8
  %result = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %op1, i32* %op1.addr, align 4
  store i32* %aOp, i32** %aOp.addr, align 8
  store i32 0, i32* %i, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i32, i32* %op1.addr, align 4
  %rem = srem i32 %0, 2
  store i32 %rem, i32* %result, align 4
  %1 = load i32, i32* %op1.addr, align 4
  %div = sdiv i32 %1, 2
  store i32 %div, i32* %op1.addr, align 4
  %2 = load i32, i32* %result, align 4
  %3 = load i32*, i32** %aOp.addr, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %idxprom
  store i32 %2, i32* %arrayidx, align 4
  %5 = load i32, i32* %i, align 4
  %inc = add nsw i32 %5, 1
  store i32 %inc, i32* %i, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %6 = load i32, i32* %op1.addr, align 4
  %cmp = icmp sgt i32 %6, 0
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @modular_exponentiation(i32 %a, i32 %b, i32 %n) #0 {
entry:
  %a.addr = alloca i32, align 4
  %b.addr = alloca i32, align 4
  %n.addr = alloca i32, align 4
  %bb = alloca i32*, align 8
  %count = alloca i32, align 4
  %d = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %a, i32* %a.addr, align 4
  store i32 %b, i32* %b.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  store i32 0, i32* %count, align 4
  store i32 1, i32* %d, align 4
  store i32 64, i32* %count, align 4
  %0 = load i32, i32* %count, align 4
  %conv = sext i32 %0 to i64
  %mul = mul i64 8, %conv
  %call = call noalias i8* @malloc(i64 %mul) #2
  %1 = bitcast i8* %call to i32*
  store i32* %1, i32** %bb, align 8
  %2 = load i32, i32* %b.addr, align 4
  %3 = load i32*, i32** %bb, align 8
  call void @decimal_to_binary(i32 %2, i32* %3)
  %4 = load i32, i32* %count, align 4
  %sub = sub nsw i32 %4, 1
  store i32 %sub, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4
  %cmp = icmp sge i32 %5, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %d, align 4
  %7 = load i32, i32* %d, align 4
  %mul2 = mul nsw i32 %6, %7
  %8 = load i32, i32* %n.addr, align 4
  %rem = srem i32 %mul2, %8
  store i32 %rem, i32* %d, align 4
  %9 = load i32*, i32** %bb, align 8
  %10 = load i32, i32* %i, align 4
  %idxprom = sext i32 %10 to i64
  %arrayidx = getelementptr inbounds i32, i32* %9, i64 %idxprom
  %11 = load i32, i32* %arrayidx, align 4
  %cmp3 = icmp eq i32 %11, 1
  %12 = load i32, i32* %d, align 4
  %13 = load i32, i32* %d, align 4
  %14 = load i32, i32* %a.addr, align 4
  %15 = mul nsw i32 %13, %14
  %16 = load i32, i32* %n.addr, align 4
  %17 = srem i32 %15, %16
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  store i32 %17, i32* %d, align 4
  br label %if.end

if.else:                                          ; preds = %for.body
  store i32 %12, i32* %d, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %18 = load i32, i32* %i, align 4
  %dec = add nsw i32 %18, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load i32, i32* %d, align 4
  ret i32 %19
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %a = alloca i32, align 4
  store i32 0, i32* %retval, align 4
  %call = call i32 @modular_exponentiation(i32 123452, i32 765435, i32 93093587)
  store i32 %call, i32* %a, align 4
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 8.0.1 (tags/RELEASE_801/final)"}
