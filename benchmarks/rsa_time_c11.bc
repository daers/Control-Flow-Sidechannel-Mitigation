; ModuleID = '../benchmarks/rsa_time_c11.c'
source_filename = "../benchmarks/rsa_time_c11.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.12.0"

%struct.stats_counter = type { [2 x [64 x i64]], [2 x i64], i32, [2 x i64] }
%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sFILEX = type opaque
%struct.__sbuf = type { i8*, i32 }

@.str = private unnamed_addr constant [16 x i8] c"modexp_data.txt\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@STATS = common global [2 x [1000 x float]] zeroinitializer, align 16

; Function Attrs: noinline nounwind ssp uwtable
define i64 @elapsed(i32, i32, i32, i32) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %11 = load i32, i32* %5, align 4
  %12 = zext i32 %11 to i64
  %13 = shl i64 %12, 32
  %14 = load i32, i32* %6, align 4
  %15 = zext i32 %14 to i64
  %16 = or i64 %13, %15
  store i64 %16, i64* %9, align 8
  %17 = load i32, i32* %7, align 4
  %18 = zext i32 %17 to i64
  %19 = shl i64 %18, 32
  %20 = load i32, i32* %8, align 4
  %21 = zext i32 %20 to i64
  %22 = or i64 %19, %21
  store i64 %22, i64* %10, align 8
  %23 = load i64, i64* %10, align 8
  %24 = load i64, i64* %9, align 8
  %25 = sub i64 %23, %24
  ret i64 %25
}

; Function Attrs: noinline nounwind ssp uwtable
define void @decimal_to_binary(i64, i64*) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i32, align 4
  store i64 %0, i64* %3, align 8
  store i64* %1, i64** %4, align 8
  store i32 0, i32* %5, align 4
  br label %6

; <label>:6:                                      ; preds = %16, %2
  %7 = load i64, i64* %3, align 8
  %8 = srem i64 %7, 2
  %9 = load i64*, i64** %4, align 8
  %10 = load i32, i32* %5, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %5, align 4
  %12 = sext i32 %10 to i64
  %13 = getelementptr inbounds i64, i64* %9, i64 %12
  store i64 %8, i64* %13, align 8
  %14 = load i64, i64* %3, align 8
  %15 = ashr i64 %14, 1
  store i64 %15, i64* %3, align 8
  br label %16

; <label>:16:                                     ; preds = %6
  %17 = load i64, i64* %3, align 8
  %18 = icmp ne i64 %17, 0
  br i1 %18, label %6, label %19

; <label>:19:                                     ; preds = %16
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i64 @modular_exponentiation(i64, i64, i64) #0 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.stats_counter, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca i64, align 8
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i64 64, i64* %8, align 8
  store i64 1, i64* %9, align 8
  store i32 0, i32* %11, align 4
  store i32 0, i32* %12, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  call void @SC_init(%struct.stats_counter* %15)
  %20 = load i64, i64* %8, align 8
  %21 = mul i64 8, %20
  %22 = call i8* @malloc(i64 %21)
  %23 = bitcast i8* %22 to i64*
  store i64* %23, i64** %7, align 8
  %24 = load i64, i64* %5, align 8
  %25 = load i64*, i64** %7, align 8
  call void @decimal_to_binary(i64 %24, i64* %25)
  %26 = load i64, i64* %8, align 8
  %27 = sub nsw i64 %26, 1
  store i64 %27, i64* %10, align 8
  br label %28

; <label>:28:                                     ; preds = %68, %3
  %29 = load i64, i64* %10, align 8
  %30 = icmp sge i64 %29, 0
  br i1 %30, label %31, label %71

; <label>:31:                                     ; preds = %28
  %32 = call { i32, i32 } asm sideeffect "CPUID\0A\09RDTSC\0A\09mov %edx, $0\0A\09mov %eax, $1\0A\09", "=r,=r,~{rax},~{rbx},~{rcx},~{rdx},~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !2
  %33 = extractvalue { i32, i32 } %32, 0
  %34 = extractvalue { i32, i32 } %32, 1
  store i32 %33, i32* %11, align 4
  store i32 %34, i32* %12, align 4
  %35 = load i64, i64* %9, align 8
  %36 = load i64, i64* %9, align 8
  %37 = mul nsw i64 %35, %36
  %38 = load i64, i64* %6, align 8
  %39 = srem i64 %37, %38
  store i64 %39, i64* %9, align 8
  %40 = load i64*, i64** %7, align 8
  %41 = load i64, i64* %10, align 8
  %42 = getelementptr inbounds i64, i64* %40, i64 %41
  %43 = load i64, i64* %42, align 8
  %44 = icmp ne i64 %43, 0
  br i1 %44, label %45, label %51

; <label>:45:                                     ; preds = %31
  %46 = load i64, i64* %9, align 8
  %47 = load i64, i64* %4, align 8
  %48 = mul nsw i64 %46, %47
  %49 = load i64, i64* %6, align 8
  %50 = srem i64 %48, %49
  store i64 %50, i64* %9, align 8
  br label %51

; <label>:51:                                     ; preds = %45, %31
  %52 = call { i32, i32 } asm sideeffect "RDTSCP\0A\09mov %edx, $0\0A\09mov %eax, $1\0A\09CPUID\0A\09", "=r,=r,~{rax},~{rbx},~{rcx},~{rdx},~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !3
  %53 = extractvalue { i32, i32 } %52, 0
  %54 = extractvalue { i32, i32 } %52, 1
  store i32 %53, i32* %13, align 4
  store i32 %54, i32* %14, align 4
  %55 = load i32, i32* %11, align 4
  %56 = load i32, i32* %12, align 4
  %57 = load i32, i32* %13, align 4
  %58 = load i32, i32* %14, align 4
  %59 = call i64 @elapsed(i32 %55, i32 %56, i32 %57, i32 %58)
  store i64 %59, i64* %19, align 8
  %60 = load i64*, i64** %7, align 8
  %61 = load i64, i64* %10, align 8
  %62 = getelementptr inbounds i64, i64* %60, i64 %61
  %63 = load i64, i64* %62, align 8
  %64 = trunc i64 %63 to i32
  %65 = load i64, i64* %10, align 8
  %66 = trunc i64 %65 to i32
  %67 = load i64, i64* %19, align 8
  call void @SC_addTick(%struct.stats_counter* %15, i32 %64, i32 %66, i64 %67)
  br label %68

; <label>:68:                                     ; preds = %51
  %69 = load i64, i64* %10, align 8
  %70 = add nsw i64 %69, -1
  store i64 %70, i64* %10, align 8
  br label %28

; <label>:71:                                     ; preds = %28
  call void @SC_calculateStats(%struct.stats_counter* %15)
  %72 = load i64, i64* %9, align 8
  ret i64 %72
}

declare void @SC_init(%struct.stats_counter*) #1

declare i8* @malloc(i64) #1

declare void @SC_addTick(%struct.stats_counter*, i32, i32, i64) #1

declare void @SC_calculateStats(%struct.stats_counter*) #1

; Function Attrs: noinline nounwind ssp uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.__sFILE*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  %10 = call %struct.__sFILE* @"\01_fopen"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i32 0, i32 0))
  store %struct.__sFILE* %10, %struct.__sFILE** %2, align 8
  store i32 0, i32* %8, align 4
  br label %11

; <label>:11:                                     ; preds = %29, %0
  %12 = load i32, i32* %8, align 4
  %13 = icmp slt i32 %12, 1000
  br i1 %13, label %14, label %32

; <label>:14:                                     ; preds = %11
  %15 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %16 = call i32 (%struct.__sFILE*, i8*, ...) @fscanf(%struct.__sFILE* %15, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i64* %4)
  %17 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %18 = call i32 (%struct.__sFILE*, i8*, ...) @fscanf(%struct.__sFILE* %17, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i64* %5)
  %19 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %20 = call i32 (%struct.__sFILE*, i8*, ...) @fscanf(%struct.__sFILE* %19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i64* %6)
  %21 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %22 = call i32 (%struct.__sFILE*, i8*, ...) @fscanf(%struct.__sFILE* %21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i64* %7)
  %23 = load i64, i64* %5, align 8
  %24 = load i64, i64* %4, align 8
  %25 = load i64, i64* %6, align 8
  %26 = load i64, i64* %7, align 8
  %27 = mul nsw i64 %25, %26
  %28 = call i64 @modular_exponentiation(i64 %23, i64 %24, i64 %27)
  store i64 %28, i64* %9, align 8
  br label %29

; <label>:29:                                     ; preds = %14
  %30 = load i32, i32* %8, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %8, align 4
  br label %11

; <label>:32:                                     ; preds = %11
  %33 = load %struct.__sFILE*, %struct.__sFILE** %2, align 8
  %34 = call i32 @fclose(%struct.__sFILE* %33)
  %35 = load i32, i32* %1, align 4
  ret i32 %35
}

declare %struct.__sFILE* @"\01_fopen"(i8*, i8*) #1

declare i32 @fscanf(%struct.__sFILE*, i8*, ...) #1

declare i32 @fclose(%struct.__sFILE*) #1

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"Apple LLVM version 9.0.0 (clang-900.0.37)"}
!2 = !{i32 -2141811111, i32 -2141811103, i32 -2141811071, i32 -2141811031, i32 -2141810991}
!3 = !{i32 -2141810859, i32 -2141810850, i32 -2141810810, i32 -2141810770, i32 -2141810738}
