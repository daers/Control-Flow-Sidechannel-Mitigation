; ModuleID = '../benchmarks/rsa_time_c11.c'
source_filename = "../benchmarks/rsa_time_c11.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@.str = private unnamed_addr constant [13 x i8] c"%ld\09%ld\09%lu\0A\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"modexp_data.txt\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.3 = private unnamed_addr constant [42 x i8] c"Failed to open file. exiting with error.\0A\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@STATS = common dso_local global [2 x [1000 x float]] zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @elapsed(i32 %start_hi, i32 %start_lo, i32 %end_hi, i32 %end_lo) #0 {
entry:
  %start_hi.addr = alloca i32, align 4
  %start_lo.addr = alloca i32, align 4
  %end_hi.addr = alloca i32, align 4
  %end_lo.addr = alloca i32, align 4
  %start = alloca i64, align 8
  %end = alloca i64, align 8
  store i32 %start_hi, i32* %start_hi.addr, align 4
  store i32 %start_lo, i32* %start_lo.addr, align 4
  store i32 %end_hi, i32* %end_hi.addr, align 4
  store i32 %end_lo, i32* %end_lo.addr, align 4
  %0 = load i32, i32* %start_hi.addr, align 4
  %conv = zext i32 %0 to i64
  %shl = shl i64 %conv, 32
  %1 = load i32, i32* %start_lo.addr, align 4
  %conv1 = zext i32 %1 to i64
  %or = or i64 %shl, %conv1
  store i64 %or, i64* %start, align 8
  %2 = load i32, i32* %end_hi.addr, align 4
  %conv2 = zext i32 %2 to i64
  %shl3 = shl i64 %conv2, 32
  %3 = load i32, i32* %end_lo.addr, align 4
  %conv4 = zext i32 %3 to i64
  %or5 = or i64 %shl3, %conv4
  store i64 %or5, i64* %end, align 8
  %4 = load i64, i64* %end, align 8
  %5 = load i64, i64* %start, align 8
  %sub = sub i64 %4, %5
  ret i64 %sub
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @decimal_to_binary(i64 %op1, i64* %aOp) #0 {
entry:
  %op1.addr = alloca i64, align 8
  %aOp.addr = alloca i64*, align 8
  %i = alloca i32, align 4
  store i64 %op1, i64* %op1.addr, align 8
  store i64* %aOp, i64** %aOp.addr, align 8
  store i32 0, i32* %i, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %0 = load i64, i64* %op1.addr, align 8
  %rem = srem i64 %0, 2
  %1 = load i64*, i64** %aOp.addr, align 8
  %2 = load i32, i32* %i, align 4
  %inc = add nsw i32 %2, 1
  store i32 %inc, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds i64, i64* %1, i64 %idxprom
  store i64 %rem, i64* %arrayidx, align 8
  %3 = load i64, i64* %op1.addr, align 8
  %shr = ashr i64 %3, 1
  store i64 %shr, i64* %op1.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %4 = load i64, i64* %op1.addr, align 8
  %tobool = icmp ne i64 %4, 0
  br i1 %tobool, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @modular_exponentiation(i64 %a, i64 %b, i64 %n) #0 {
entry:
  %a.addr = alloca i64, align 8
  %b.addr = alloca i64, align 8
  %n.addr = alloca i64, align 8
  %bb = alloca i64*, align 8
  %count = alloca i64, align 8
  %d = alloca i64, align 8
  %i = alloca i64, align 8
  %start_hi = alloca i32, align 4
  %start_lo = alloca i32, align 4
  %end_hi = alloca i32, align 4
  %end_lo = alloca i32, align 4
  %e = alloca i64, align 8
  store i64 %a, i64* %a.addr, align 8
  store i64 %b, i64* %b.addr, align 8
  store i64 %n, i64* %n.addr, align 8
  store i64 64, i64* %count, align 8
  store i64 1, i64* %d, align 8
  store i32 0, i32* %start_hi, align 4
  store i32 0, i32* %start_lo, align 4
  store i32 0, i32* %end_hi, align 4
  store i32 0, i32* %end_lo, align 4
  %0 = load i64, i64* %count, align 8
  %mul = mul i64 8, %0
  %call = call noalias i8* @malloc(i64 %mul) #4
  %1 = bitcast i8* %call to i64*
  store i64* %1, i64** %bb, align 8
  %2 = load i64, i64* %b.addr, align 8
  %3 = load i64*, i64** %bb, align 8
  call void @decimal_to_binary(i64 %2, i64* %3)
  %4 = load i64, i64* %count, align 8
  %sub = sub nsw i64 %4, 1
  store i64 %sub, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i64, i64* %i, align 8
  %cmp = icmp sge i64 %5, 0
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %d, align 8
  %7 = load i64, i64* %d, align 8
  %mul1 = mul nsw i64 %6, %7
  %8 = load i64, i64* %n.addr, align 8
  %rem = srem i64 %mul1, %8
  store i64 %rem, i64* %d, align 8
  %9 = call { i32, i32 } asm sideeffect "CPUID\0A\09RDTSC\0A\09mov %edx, $0\0A\09mov %eax, $1\0A\09", "=r,=r,~{rax},~{rbx},~{rcx},~{rdx},~{dirflag},~{fpsr},~{flags}"() #4, !srcloc !2
  %asmresult = extractvalue { i32, i32 } %9, 0
  %asmresult2 = extractvalue { i32, i32 } %9, 1
  store i32 %asmresult, i32* %start_hi, align 4
  store i32 %asmresult2, i32* %start_lo, align 4
  %10 = load i64*, i64** %bb, align 8
  %11 = load i64, i64* %i, align 8
  %arrayidx = getelementptr inbounds i64, i64* %10, i64 %11
  %12 = load i64, i64* %arrayidx, align 8
  %cmp3 = icmp eq i64 %12, 1
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %13 = load i64, i64* %d, align 8
  %14 = load i64, i64* %a.addr, align 8
  %mul4 = mul nsw i64 %13, %14
  %15 = load i64, i64* %n.addr, align 8
  %rem5 = srem i64 %mul4, %15
  store i64 %rem5, i64* %d, align 8
  br label %if.end

if.else:                                          ; preds = %for.body
  %16 = load i64, i64* %d, align 8
  store i64 %16, i64* %d, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %17 = call { i32, i32 } asm sideeffect "RDTSCP\0A\09mov %edx, $0\0A\09mov %eax, $1\0A\09CPUID\0A\09", "=r,=r,~{rax},~{rbx},~{rcx},~{rdx},~{dirflag},~{fpsr},~{flags}"() #4, !srcloc !3
  %asmresult6 = extractvalue { i32, i32 } %17, 0
  %asmresult7 = extractvalue { i32, i32 } %17, 1
  store i32 %asmresult6, i32* %end_hi, align 4
  store i32 %asmresult7, i32* %end_lo, align 4
  %18 = load i32, i32* %start_hi, align 4
  %19 = load i32, i32* %start_lo, align 4
  %20 = load i32, i32* %end_hi, align 4
  %21 = load i32, i32* %end_lo, align 4
  %call8 = call i64 @elapsed(i32 %18, i32 %19, i32 %20, i32 %21)
  store i64 %call8, i64* %e, align 8
  %22 = load i64, i64* %b.addr, align 8
  %23 = load i64*, i64** %bb, align 8
  %24 = load i64, i64* %i, align 8
  %arrayidx9 = getelementptr inbounds i64, i64* %23, i64 %24
  %25 = load i64, i64* %arrayidx9, align 8
  %26 = load i64, i64* %e, align 8
  %call10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i64 %22, i64 %25, i64 %26)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %27 = load i64, i64* %i, align 8
  %dec = add nsw i64 %27, -1
  store i64 %dec, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load i64, i64* %d, align 8
  ret i64 %28
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
entry:
  %retval = alloca i32, align 4
  %tempChar = alloca i32, align 4
  %fileptr = alloca %struct._IO_FILE*, align 8
  %d = alloca i64, align 8
  %m = alloca i64, align 8
  %p = alloca i64, align 8
  %q = alloca i64, align 8
  %i = alloca i32, align 4
  %a = alloca i64, align 8
  store i32 0, i32* %retval, align 4
  %call = call %struct._IO_FILE* @fopen(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  store %struct._IO_FILE* %call, %struct._IO_FILE** %fileptr, align 8
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** %fileptr, align 8
  %tobool = icmp ne %struct._IO_FILE* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i32 0, i32 0))
  call void @exit(i32 1) #5
  unreachable

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %1, 1000
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** %fileptr, align 8
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fscanf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i64* %d)
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %fileptr, align 8
  %call3 = call i32 (%struct._IO_FILE*, i8*, ...) @fscanf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i64* %m)
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %fileptr, align 8
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fscanf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i64* %p)
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %fileptr, align 8
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fscanf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i32 0, i32 0), i64* %q)
  %6 = load i64, i64* %m, align 8
  %7 = load i64, i64* %d, align 8
  %8 = load i64, i64* %p, align 8
  %9 = load i64, i64* %q, align 8
  %mul = mul nsw i64 %8, %9
  %call6 = call i64 @modular_exponentiation(i64 %6, i64 %7, i64 %mul)
  store i64 %call6, i64* %a, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4
  %inc = add nsw i32 %10, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %fileptr, align 8
  %call7 = call i32 @fclose(%struct._IO_FILE* %11)
  %12 = load i32, i32* %retval, align 4
  ret i32 %12
}

declare dso_local %struct._IO_FILE* @fopen(i8*, i8*) #2

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #3

declare dso_local i32 @fscanf(%struct._IO_FILE*, i8*, ...) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 8.0.1 (tags/RELEASE_801/final)"}
!2 = !{i32 -2143847010, i32 -2143847002, i32 -2143846970, i32 -2143846930, i32 -2143846890}
!3 = !{i32 -2143846758, i32 -2143846749, i32 -2143846709, i32 -2143846669, i32 -2143846637}
